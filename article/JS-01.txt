<pre style="text-indent:0;">1.JS定义
    1.JavaScript组成
        1.ECMAScript：解释器
            1.解释翻译。提供加减乘除的计算功能。
            2.没有兼容性问题。
        2.DOM：文档对象模型
            1.Document Object Model
            2.提供操作DOM元素的接口
            3.兼容性问题不大。
        3.BOM：浏览器对象模型
            1.Browser Object Model
            2.提供JS操作浏览器的接口，比如弹窗，打印，即window。
            3.几乎不兼容，使用较少。

    2.JS作用
        1.写入HTML输出
            document.write("&lt;p>This is a paragraph&lt;/p>");
        2.定义事件
            &lt;button type="button" onclick="alert('Welcome!')">点击这里&lt;/button>

        3.获取并改变DOM
            1.x=document.getElementById("demo")  //查找元素
            2.x.innerHTML="Hello JavaScript";    //改变元素值

        4.修改HTML样式
            1.x=document.getElementById("demo")  //找到元素
            2.x.style.color="#ff0000";           //改变样式

        5.处理数据
            if isNaN(x) {alert("Not Numeric")};

        6.处理用户数据和提交

    3.JS规范
        1.JS代码区分大小写
        2.构造函数首字符大写

2.标识符
    ！！标识符是一个具体数据的名字
    1.变量
        1.定义
            1.var：存储数据的容器，为数据开辟内存，是存储器里附有的独一无二的存储位置。包含值和地址。
            2.JS是弱类型语言,变量可以随时保持任何类型的值
            3.局部变量在函数退出后就会被销毁

        3.变量命名规范
            1.前缀写法
                1.数组a    2.布尔值b    3.浮点数f    4.整数i
                5.函数fn   6.对象o      7.正则表达式re
                8.字符串s  7.变体变量v(可能为其他数据类型的变量)

            2.驼峰法:单词首字符大写

            3.变量命名不可使用关键字或保留字
            4.变量名不允许空格和标点符号($除外),即只能包含字母、数字、下划线、$
            5.变量名的第一个字符不能是数字。

    2.const：常量
        1.常量：代表一个固定不变的数值
        2.无法重新赋值，只能在初始改变，因此它的数据类型一开始就固定了。

    3.标识符命名不可使用关键字和保留字
        1.关键字
            1.可用于表示控制语句的开始或结束，或者用于执行特定操作。为语言保留，不能作为标识符。
            2.使用关键字的错误提示:identifier expected
            3.break/do/instanceof/typeof/case/else/new/var/catch/finaly/return/void/continue/for/
              switch/while/debugger/function/this/with/default/if/throw/delete/in/try
        2.保留字
            1.目前不是关键字,但将来可能会是
            2.abstract/enum/int/short/boolean/export/interface/static/byte/extends/long/super/char/
              final/native/synchronized/class/float/package/throws/const/goto/private/transient/
              implements/protected/volatile/double/import/public

3.数据类型
    1.定义
        1.变量的数据类型由存储的数据决定，JS是弱类型语言。
        2.建议一个变量只存放一种数据类型，便于管理。
        3.变量的数据类型决定了如何将这些值存储到计算机的内存中

        2.计算机存储：
            1.计算机中,以位(0/1)表示数据，数据的最小寻址单位称为字节，通常是八位。机器码指令处理的单位，称为字长。
            2.大部分对字长的指令解释，主要以二进制为主。
            3.一个32位的字长，可以表示从0至2的32次方减1的无符号整数值，或者表示从负的2的32次方至2的32次方减1的有符号整数值。
            4.存在着特殊的算术指令，对字长中的位使用不同的解释，以区分为浮点数。

            5.数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候要用到大数据的时候才需要申请大内存，就可以充分利用内存。
            6.如果在声明中没有说明数据类型，则变量的数据类型是variant。
            7.var数据类型像变色龙，它可以在不同的场合代表不同的数据类型。
            8.给属性赋值时，这个值就有了数据类型，函数的参数也有数据类型。
            9.不同的数据类型所需占用的存储空间，方便变量申请内存，以节省了内存的使用。
            10.对象型：.object变量作为32位地址来存储，该地址可以引用应用程序中或某些其他应用程序中的对象。

    2.数据类型分类
        1.6种数据类型
            1.number数字
            2.string字符串
            3.Boolean布尔
                1.true:非空字符串/非零数字/对象/
                2.false:空字符串/0和NaN/null/undefined
            3.Object对象
            4.function函数
            5.undefined：
                1.变量没有定义的情况下出现
                2.声明了，但是没有赋值，而数据类型是由存储数据决定的。
                3.undefined派生自null,undefined == null为ture

            6.null:空对象指针
                1.如果变量准备将来用来保存对象,可以赋值为null

        2.分类2
            1.基本类型：number、字符串、Boolean、undefined。
            2.复合类型：对象，由其他基本数据类型组成。

        3.分类3
            1.基本类型：number,str,boolean
                1.变量名和值都存储于栈内存中
                2.赋值：直接在栈内存中生成b值，两个变量以后进行值改变不会相互影响

            2.引用类型：object,arr,function,Date
                1.变量名存储于栈内存中,值存储于堆内存中,并在栈内存中存储值的地址,地址指向堆内存中的值
                2.赋值：赋予变量的是值地址，通过这个地址，两者指向的其实是堆内存中的同一个值，所以以后任一变量对值进行改变，会直接影响另一个变量的值

4.基本数据类型
    1.数字number
        1.定义
            1.包含：int/float/NaN
            2.浮点数需要的存储空间是整型的两倍
            3.如果小数点后没有数字,那么认为它是整型
            4.由于内存的限制,JS数值是由范围的,超出了就会显示为Infinity或-Infinity,无法计算
            5.JavaScript数字只有一种类型，数字均为64位，按照8byte的浮点数存储

            6.进制
                1.十进制：默认，但不要在第一位写0
                2.八进制：前缀为0
                3.十六进制：0x

        2.NaN：非数字的number类型
            1.NAN：not a number，即非数字。
            2.NAN与任何值不相等,包括它自身。
            3.isNAN()：专门用来检测值是否是NAN。
            4.一般出现了NAN,即出现了非法的运算操作。
            5.任何数值除以0都会返回NaN

        3.方法
            1.toFixed(n):将数字四舍五入
                1.传参:小数点的位数
                2.如果不是nubmer型,报错
            2.toString()
            3.valueOf()

        4.Number()对象方法
            1.new Number():返回一个新的nubmer对象

            2.Number()：将对象整体转换为数字
                1.返回值:若转换失败,NaN
                2.转换原理：针对整体，如字符串整体是数字，可以转换。
                3.根据传参对象:
                    1.字符串：
                        1.空字符和空格，转换为0。
                        2.非空即整体转换，不成功即NAN。
                        3.只有数字和浮点类型数字才能转换成功
                            1.可以识别+/-,以及进制0x,
                            2.第一位为0,跳过
                            3.结果始终是十进制,若是其他进制,自行转换
                        4.字符串

                    2.布尔：true为1，false为0
                    3.数组：
                        1.空或单个元素：对该元素进行Number转换
                        2.多个元素：NAN
                    5.null：值为0
                    6.undefined：值为NAN
                    7.obj、函数：NAN
                    8.Jason：NAN

        5.window全局方法
            1.parseInt(str,10)：将字符串转换整型。
                1.传参类型为字符串
                2.第二个参数设置进制类型,常见为2/8/10/16,2~36取值范围
                3.原理：从第一位开始，一位位检测，第一位是空格或0,会跳过,后面不可以,
                    往后搜索数字，碰到非数字即结束。
                4.不设置第二个参数
                    1.默认为0,十进制解析,遇到空格和0会跳过
                    2.开头是0x或0X开头,解析为16进制

            2.parseFloat()；将目标转换为浮点数
                1.没有进制转换,字符串必须是十进制形式表示
                2.与parseInt()相比,原理基本相同，但可以识别第一个小数点，返回浮点数。

            3.isNaN(val):判断是否是数字
                1.原理:调用Number(),根据结果是否是数字,返回布尔值
                2.如果是NaN,返回true
                3.使用：
                    1.判断NaN
                    2.检测parseInt()和parseFloat()的结果,判断是否是合法的数字
                    3.判断是否是非法运算,若0作除数

            4.isNumber():判断对象是不是数字或数字字符串。
                1.原理:调用Number()方法

    2.字符串string
        1.定义
            1.字符串由多个字符组成,字符包括字母、数字、标点符号和空格
            2.字符串必须包在引号里,以便于数值和其它字符串区分

            3.单引号与双引号
                1.字符串包含同类型引号
                    1.改为嵌套不同类型，但只能嵌套一层,记住！！
                   var a = "jack 'gay' go";
                    2.使用转义字符
                    var a = "a \" jack";

                2.内部包含不用类型的引号：可以正常输出
                    var a = "'a";

        2.转义字符
            1.用于字符串内的
            2.特殊字符,拥有一些实际作用或操作
                1.\n:换行     2.\t:制表符    3.\b:空格
                4.\r:回车     5.\f:进制      6.\\:斜杠
                7.\':单引号   8.\":双引号
                9.\xnn:以十六进制代码nn表示一个字符(n为0~F)
                10.\unnnn:以十六进制表示一个unicode字符(n为0~F)

        3.字符串的属性和方法
            1.属性：
                1.length:字符串的长度
                    1.字符串的长度不可修改
                    2.空格也算字符串的一部分,计入长度
            2.方法
            1.charAt(n)：获取字符串第几个字符
                str.charAt(0)
            2.charCodeAt(n)：返回对应下标字符的Unicode编码值
                str.charCodeAt(0)

            3.indexOf('匹配的字符'，'第几位开始')：检索字符串
                1.查找某个指定的字符串值在字符串中是否出现，返回首次出现的位置，从0开始计算位置，对大小写敏感。
                2.查找机制：从左开始，默认从0位开始。负数也是从0为开始。也不要超出字符串的长度,找到一个就停止。
                3.返回值：该字符串在字符串的第几位，即下标。若找不到返回-1。
                4.如果省略查找起始位置,默认从0开始

            4.lastIndexOf('匹配字符','第几位开始'):
                1.查找机制：与indexOf()类型,只是从右向左寻找

            5.search():检索字符串
                1.检索字符串中指定的子字符串
                2.检索与正则表达式相匹配的子字符串。
                3.如果没有找到返回-1
                4.总是从字符串第一位开始检索

            6.substring(开始下标，结束下标)：截取字符串
                1.返回值：截取的字符串
                2.查找机制：默认从零到最后一个,包括开始,不包括结束的下标
                3.自动选取最小值作为开始点。
                    1.若开始的数字小于结束的数字，会自动对调。
                4.若参数为负数，做零处理。

            7.slice(开始下标,结束下标)：截取字符串
                1.返回值：截取的字符串
                2.不会交换位置，若开始的数字小于结束查找的数字，不会交换，查找不到。
                3.若开始为负数，会从尾部开始查找。

            8.toUpperCase()
                转成大写，没有参数
            9.toLowerCase()
                转成小写，没有参数

            10.split(分隔符)：用分隔符将字符串转换为数组
                1.返回值：用分隔符分开的数组
                2.分隔符的配置：
                    1.不放分隔符，将整个字符串作为一个元素存入数组。
                        str.split()
                    2.分隔符为‘’，将字符串每个字符分割为一个数组的元素。
                        str.split('')
                    3.用字符串的某一个字符作为分隔符,从字符串中移除该字符,切成若干段。
                        str.split('s')
                    4.若分隔符切割后,有空,则作为一个空元素存入
                        var str=’/www/';
                        str.split('/')           //[，www，]

                    5.传参第二个参数,设定新数组的长度
            11.join()
                原理：用分隔符将数组元素连接起来成为一个字符串。
                1.join()：没有参数，默认用数组的逗号连接成字符串
                2.join('')：参数为空字符串。数组的元素连接在一起称为一个字符串。
                3.join('-')：将每个元素用-连接为字符串。

            12.concat(str1,str2):连接字符串
            13.replace(reg,str)：在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串
                1.reg：子字符串或Reg对象
                2.str：替换后内容
                3.返回值：替换后的新字符串
                    str.replace(/Microsoft/, "W3School")

        4.String对象方法
            1.String.fromCharCode(va1,va2):获取对应编码的字符
                String.fromCharCode(22937)
            2.String(obj)：将对象转为字符串

        5.操作符
            1.加号
                1.数值相加计算
                    1.若是字符串与数字相加，结果为字符串相连，首先将数值转换为字符串。

                2.字符串连接
                    1.两个参数为字符串，连接起来。

        6.字符串编码值
            1.48~57：0~9
            2.97~122：a~Z
            3.65~90：A~Z

    2.布尔值boolean
        1.true:非空字符串/非零数字/对象/
        2.false:空字符串/0和NaN/null/undefined

5.引用数据类型
    1.Object对象
        1.定义
            1.一组属性和方法的集合
            2.Object的方法是所有对象共有的

            3.用对象来代替传统数组，意味着可以通过属性名而非下标，提高了脚本的可读性。

        2.方法
            1.Object的方法是所有对象共有的

    2.数组Array()
        1.定义
            1.数组创建
                var arr1 = [1,2,3];
                var arr2 = new Array(1,2,3);
                var arr3 = new Array(20);       //定义长度
                var arr4 = new Array()/[];      //空数组

            2.规范
                1.一个数组建议只存一种类型的变量，否则用JSon。
            3.修改数组
                1.使用下标
                    1.arr[3] = 4;       //如果存在,修改,如果不存在,增加一个元素
                2.使用length
                    1.变小：多余的数组被截断
                    2.变大：新填充的元素为undefined
                    3.arr[arr.length]：始终在末尾添加元素
                3.使用数组方法

        2.实例属性
            1.length：数组元素的个数
                1.arr.length = 0        //清空数组
                2.length可以清空,但不可修改
                3.length可以修改
                    1.变小：多余的数组被截断
                    2.变大：新填充的元素为undefined
                        arr.length = 3;

        3.构造函数Array()
            1.new Array()：创建一个Array对象
            2.new Array()：创建对象，并定义长度
            3.new Array('jack',2)：创建对象，并赋值
                1.传值不要使用变量名


        4.实例方法
            1.push()：向数组尾部添加多个元素
                1.默认往数组最后一位添加
                2.返回值：数组的新长度
                arr.push('ad');
            2.pop()：删除数组的最后一个元素
                1.返回值：删除的元素

            3.unshift()：向数组第一位添加多个元素
                1.返回值：数组的新长度
            4.shift()：删除数组的第一个元素
                1.返回值：删除的元素

            6.数组最后一个移到第一位
                arr.unshift(arr.pop());
            7.数组第一个移动最后一位
                arr.push(arr.shift());
            5.sort()：排序一个数组
                1.默认按元素首字符的编码值比较
                2.传参一个函数,定义具体的排序方式
                3.使用见"JS算法"

            6.contact(arr)：两个数组的连接

            7.join()：用分隔符将数组元素连接起来成为一个字符串。
                1.join()：没有参数，默认用数组的逗号连接成字符串
                2.join('')：参数为空字符串。数组的元素连接在一起称为一个字符串。
                3.join('-')：将每个元素用-连接为字符串。

            8.split(分隔符)：将字符串用分隔符割开,存入一个数组

            9.splice(起始位置,删除元素的个数,新插入元素)：删除数组元素,并添加新元素
                返回值：被删除的元素
                arr.splice(0,1);            /*删除：从第几位开始，删除几位*/
                arr.splice(0,1,'gordon');   /*替换：从第几位开始，删除几位，替换的元素*/
                arr.splice(1,0,'gordon');   /*添加：从第几位开始，删除0位，添加的元素*/

            10.reverse()：颠倒数组
                1.会改变原来的数组

            11.toString()：将数组转化为字符串

            12.valueOf()：返回数组对象的原始值

    3.函数Function()
        1.参数：参数是变量声明
        2.实例属性和方法
            1.实例属性
                1.length:实参个数
            2.实例方法
                1.修改this指向
                    1.call():函数调用，修改this指向
                        1.语法：Function.call(thisobj,arg1,arg2)
                        2.参数
                            1.thisobj:这个对象将代替Function里的this指向
                            2.arg：函数的传参列表

                        3.定义：调用当前函数,修改this执行

                        4.比较：call()与apply()
                            1.作用相同,调用函数,修改this指向,获取构造函数里的属性和方法
                            2.不同：
                                1.call()函数是将Function对象的参数一个个分别传入
                                2.apply()函数是将Function对象的参数以一个数组或arguments对象的形式整体传入。

                    2.apply()：函数调用，修改this指向
                        1.语法：Function.apply(thisobj,[args]）
                        2.参数：
                            1.thisobj：这个对象将代替Function的this对象
                            2.args：一个数组，函数的传参4

                    3.bind()：函数调用，修改this指向
                        1.语法：Function.bind(thisobj)(arg1,arg2);
                        2.EcmaScript5中扩展了叫bind的方法（IE6,7,8不支持）
                        3.返回值：函数
                            1.修改了this指向，但没有调用，需要手动调用
                            2.fn.bind(obj)()
                    4.详情见混淆分析
        3.函数Function对象属性
            1.arguments:函数对象的实参集合,长度自动变化
                1.定义
                    1.存储传递进来的实参
                    2.属于对象,具备数组的一些特定性质,但不是数组
                    3.当函数的参数个数无法确定,使用arguments获取实参
                    4.局部变量,可以读写,在函数内部使用

                2.使用
                    1.arguments[i]：定位具体实参
                    2.在还是内部作为一个变量使用
                        console.log( arguments.length );

    4.Date()对象
        1.定义
            1.用于处理日期和时间
            2.Date对象自动使用当前的日期和时间作为其初始值
        2.Date()构造函数
            //把字符串转换为Date对象，可以这么理解

            1.Date():默认返回当前日期时间
                    alert(Date());          //值是字符串，Wed Sep 28 2016 16:21:57 GMT+0800 (中国标准时间)
            2.new Date()：创建Date对象，默认返回预格式化的日期
                1.Date对象默认把当前日期作为其初始值。
                    var time = new Date();      //值是对象，Wed Sep 28 2016 16:23:02 GMT+0800 (中国标准时间)
            2.new Date(data)
                1.new Date(n)：
                    1.n 表示自1970年1月1日00:00:00 (世界标准时间) 起经过的毫秒数
                    2.返回毫秒计算后的时间

                2.new Date(dateString)
                    1.dataString：设定时间
                    2.推荐：new Date(yyyy,mth,dd,hh,mm,ss);
                        1.参数至少有yyyy,mth
                        2.其他没写为0或1，天默认为1
                        3.赋值超出范围，会累加给年，月
                        4.其他格式：
                            1.new Date("month dd,yyyy hh:mm:ss");
                            2.new Date("month dd,yyyy");
                            3.new Date(yyyy,mth,dd);
                            4.new Date(ms);
                        5.如果只输入年月日，支持
                            1.'2019-09-10'
                            2.'2009/09/10'

                    3.总结：
                        1.month:用英文表示月份名称，从January到December
                        2.mth:用整数表示月份，从0-11(1月到12月)，从0月开始计算，结果需加1.
                        3.dd:表示一个月中的第几天，从1到31
                        4.yyyy:四位数表示的年份
                        5.hh:小时数，从0（午夜）到23（晚11点）
                        6.mm:分钟数，从0到59的整数
                        7.ss:秒数，从0到59的整数
                        8.ms:毫秒数，为大于等于0的整数

        3.实例方法：
            1.获取时间
                1.getFullYear():返回年
                2.getMonth() + 1:返回月,0~11
                3.getDate():返回日,1~31
                4.getHours:返回小时,0~23
                5.getMinutes:返回分钟,0~59
                6.getSeconds:返回秒,0~59
                7.getMilliseconds:返回毫秒,0~999
                8.getTime():时间戳，返回1970年1月1日至今的毫秒数

            2.设置时间(超出范围会累加)
                1.setDate(value):修改天(1 ~ 31),数字若大于31则累积到下个月
                        var myDate=new Date()
                        myDate.setDate(myDate.getDate()+5)
                    1.取值：
                        1.0：月和日受影响，变为当前上一个月的最后一天
                        2.负数：月和日受影响，从上个月最后一天开始减

                2.setMonth():修改月份(0 ~ 11)。
                3.setFullYear(year,[month],[day]):修改Date对象中的年份(四位数字)。
                    1.可以同时修改月和日

                4.setHours(hours,[min],[sec]):修改小时(0 ~ 23)。
                    1.min/sec可选
                5.setMinutes():修改分钟(0 ~ 59)。
                6.setSeconds():修改Date秒钟(0 ~ 59)。
                7.setMilliseconds():修改毫秒(0 ~ 999)。
                8.setTime(n):
                    1.距离UTC的时间来重新设置日期，与new Date(n)类似
                        var a = new Date();
                        console.log(a);
                        //Wed Sep 28 2016 17:16:55 GMT+0800 (中国标准时间)
                        a.setTime(0);
                        console.log(a);         //Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)
            2.总结
                1.时间计算总结：
                    1.天：Math.floor(t/86400)
                    2.时:Math.floor(t%86400/3600)
                    3.Math.floor(t%86400%3600/60)
                    4.秒:t%60

                2.星期：
                    week=0：星期天    week=1：星期一
                    week=2：星期二    week=3：星期三
                    week=4：星期四    week=5：星期五
                    week=6：星期六

                3.具体日期
                    str = year + '年 ' + month + '月 ' + day + '日 '+week + ' '
                        + fnTwo(hours) + '时 ' + fnTwo(min) + '分 ' + fnTwo(sec) + '秒 ';
                        time.innerHTML = str;

                3.将时/分/秒设置为两位数：
                    function fnTwo(n) {
                        if (n &lt; 10) {
                            return '0' + n;
                        } else {
                            return '' + n;
                        }
                    /*简化:return sec&lt;10?'0'+sec:''+sec;
                    }

        4.比较日期
            var today = new Date();
            var myDate = new Date();
            myDate.setFullYear(2008,8,9);
            alert(myDate>today);            //日期可以直接比较

    5.Math对象
        1.定义：
            1.用于执行数学任务
            2.没有构造函数，无法实例化对象

        2.属性
            1.Math.PI：π

        3.方法
            1.Math.abs(x)：绝对值
            2.Math.ceil(x)：向上取整
            3.Math.floor(x)：向下取整
            4.Math.max(x,y)：取最大值
            5.Math.min(x,y,z...)：取最小值
            6.Math.randow()：随机数0~1
            7.Math.round(x)：四舍五入

    6.RegExp()对象
        1.定义
            1.正则表达式

        2.构造函数RegExp()
            var pat = new RegExp('x');

        3.实例方法
            1.test(str)
                1.检索字符串中指定值
                2.返回值：true/false

                var patt1=new RegExp("e");    //创建一个正则检查
                alert(pat.test("The best"));

            2.exec(str)
                1.检索字符串中指定值
                2.返回值：找到的值(即检索值)，否则为null
                var patt1=new RegExp("e");      //创建一个正则检查
                alert(pat.test("The best"));    //'e'

            3.compile(str)
                1.添加检索

                pat.compile('d');
                alert(pat.test('The best'));
6.操作符
    1.一元操作符
        1.++/--num:前置递增
            1.先执行++,后执行代码
            2.变量的值在语句执行前就改变的
                var a = 3;
                var b = ++a + 1;    //b=5,a=4
        2.num++/--:后置递增
            1.先执行代码,后执行++
            2.变量的值是在语句执行完后才改变的
                var a = 3;
                var b = a++ + 1;    //b=4,a=4
    2.二元操作符
        1.加号+
            1.作用：数字运算或字符串拼接
            2.两个值都是字符串,进行字符串拼接
            3.有一个是对象/布尔值,利用toString()转换字符串,再拼接
            4.一个字符串,一个数字,将数字转换为字符串,进行拼接
            5.如果是null和undefined,利用String()取得字符串'null'和'undefined'进行拼接

        2.减号-
            1.(-0)-(-0)= +0
            2.一个值是字符串/布尔值/null/undefined,先调用Number()转换为数字
            3.一个值是对象,调用valueOf()取得表示该对象的值,若对象没有valueOf(),则调用toString(),再将字符串转为数字</pre>












