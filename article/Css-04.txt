<pre style="text-indent:0;">
1.理论
    1.定义
        1.Css:cascading style sheets,层叠样式表
    2.格式
        1.选择器 {}
        selector:{attr:value;}

    3.Css分类
        1.内联/行间样式排
            1.元素上通过style属性添加样式。
            2.只可放置一个声明块，不可用@import嵌套外部样式表。
            &lt;div style="color:black">&lt;/div>

        2.外联样式
            1.style标签里,直接添加样式
            &lt;style type="text/css">
                div {color: black;}
            &lt;/style>

        3.嵌套样式表
            1.link标签引入
            &lt;link rel="stylesheet" type="text/css" href="bg.css">

        eg：@import
            1.HTML文件，style标签中@import引入外部样式表
                1.可以指定媒体查询
                &lt;style type="text/css">
                    @import url(bg.css) all;
                    @import url(bm.css) screen;
                &lt;/style>

            2.Css文件，引入一个外部样式表,放在头部
                @import "bg.css";
                div {color:black;}

2.选择器
    //利用DOM结构树，选择器获取具体的元素。
    //格式：选择器 {}

    1.元素选择器
        p {}
    2.类选取器
        p.class {}               //类中的所有段落
        .class {}                //类中的所有元素
        .class1.class2 {}        //同时包含两个类的元素
    2.ID选取器
        #ID {}
    3.后代选择器
        div h2 {}                // 父元素div下面的所有h2元素。
    4.子元素选择器
        p > a { }
    5.兄弟选取器
        h1 + p { }
        //h1元素后面紧接着的p元素。h1和p拥有共同的父元素,兄弟关系。

    6.组选择器
        h2,p {color：black；}   //用逗号连接多个元素
    7.通配选取器
        * { color : red ; }      //选取了所有的元素
    8.属性选取器
        p[class] { }             //有class属性的所有p元素。
        *[alt] { }
        a[[href][title]] {}      //同时拥有href和title属性的所有a元素,中间没有空格

    9.属性值选取器
        1.属性值完全匹配
            p[alt="game"] { }                   //alt属性值为game的所有p元素。
            a[href=""][title=""] {}             //满足多个属性值的元素。

            1.属性值是完全匹配，包括空格符。
            2.clas属性值必须全部有

        2.属性值部分匹配
            属性值中包含某个值，用于属性值有空格的情况下。
            1.~=：部分属性值,用于词列表属性值
                p[class~= "warm"] {}
            2.^=：开头字符
                [abc^="def"]         // 属性值以ball开头的所有元素
            3.$=：结尾字符
                [abc$="def"]         //选择abc属性值以"def"结尾的所有元素
            4.*=：包含字符
                [abc*="def"]         //选择abc属性值中包含子串"def"的所有元素

        div[lang|='zh']             //以zh开头或zh-开头的属性值
        div[title~'hello']          //值用空格隔开，包含hello单词
            &lt;div title="hello world">&lt;/div>

    10.伪类选择器
        1.伪类：pseudo class
            1.伪类：像一个类，但并不是真正的类,元素指定的一种附加状态。

        2.链接伪类
            浏览器会检查所有的a元素，根据状态，把他们加入伪类中。
            1.a:link             链接未访问时
            2.a:visited          链接已访问时
            3.a:hover            鼠标悬停链接
            4.a:active           被激活的链接

            eg:
            1.伪类顺序
                link=>visited=>(focus)=>hover=>active
            2.a{}与a:link {}
                1.a{}:控制所有a标签,有的a标签没有href指向
                2.a:link:只控制未访问状态下的a标签,对于无href属性的a标签无效

        3.动态伪类(一般可以用于任何元素)
            1.:foucs       元素成为焦点时,如tab键
            2.:hover       鼠标停留时
            3.:active      被用户激活的元素

        3.静态伪类
            1.:first-child
                p:first-child {}
                //p元素下的第一个子标签，只能有一个儿子，先出现先得。
            2.:last-child
                p:last-child{ }
                //p元素下的最后一个子标签
            3.:first-letter
                p:first-letter
                //文本段落的第一个字母
            4.:first-line
                p:first-line
                p段落的第一个行
                //附：first-line与firs-letter一般用于块元素。

        4.:lang选择器
            1.向带有指定lang属性开始的元素添加样式
                1.lang="en",lang="en-us"
                2.指定语言属性的元素
                p:lang(it) {color:black;}

        5.结合伪类
            1. a:link:hover
            //鼠标停留在未访问的链接上。
            1. a:link:hover:lang（de）
            //鼠标停留在未访问的德语链接上。

            3.伪类与类结合
                a:link,a.box:visited { }

        6.插入内容的伪类
            1.:before           在元素前插入内容。
            2.:after            在元素结束后插入内容。
            //IE7不支持before和after。

    11.选择器注意点
        1.伪类始终是在选择器的最后面
            p:firs-line em 是错的。
        2.如果声明块中，某个声明出错，那么整个声明块都会被忽略。

3.结构和层叠
    1.继承：根据DOM结构树,元素向后代元素传递属性值的机制。
        1.继承来源：
            1.大多数元素会从其父元素继承字体样式
            2.行内元素可以继承块级元素样式，而反之不允许。
            3.如果没有选择器定义元素的样式,就要依赖于继承
            4.根据DOM树依次查找,直到找到需要的样式
            5.如果元素没有从它的任何祖先继承样式，就使用默认样式。

        2.常见继承样式：
            1.文本相关属性：
                font-family, font-size, font-style,
                font-variant, font-weight, font, letter-spacing,
                line-height, text-align, text-indent, texttransform,
                word-spacing
            2.列表相关属性：
                list-style-image, list-style-position,
                list-style-type, list-style
            3.color属性

        3.不被继承样式：
            1.大多是设计盒元素的定位和显示：
                border,padding,margin
            总结：
                1.从父元素那里继承
                2.继承的是计算后的数值,而非定义的数据

    2.层叠：一个具体的元素,会有来源多处的Css样式,利用层叠计算出最终的样式属性
        1.样式的来源
            1.默认样式属性
            2.浏览器用户使用时选择的样式。
            3.网页设计者定义的样式表
                1.DOM树继承的样式
                2.行间设置的样式
                3.选择器声明的样式,包括内置和外部样式表

        2.优先级/特殊性
            1.处理样式冲突
            2.对于同一个元素的不同选择器样式，会先计算选择器的特殊性，如果一个元素有多个冲突的样式声明，那么最高特殊性的声明就会胜出。
            3.选择器的特殊性由选择器本身的组件来确定。
                1.内联：           1000
                2.ID：             0100
                3.类：             010
                4.属性筛选：       010
                5.属性值：         010
                6.伪类：           010
                7.元素名：         001
                8.结合符和通配符
                    1.通配符：对特殊性没有贡献,特殊性为000,比结合符强
                    2.结合符：没有特殊性

                9.继承：没有特殊性

        3.!importan
            1.申明最高
            2.格式:p {color:red !important;}

        4.层叠规则
            1.!important最高,其次内联样式

            2.层叠原理：
                1.找到该元素身上的所有样式声明
                2.按Css来源进行排序
                    1.!important>内联样式>内嵌样式>外部样式表>用户定义的样式表>默认样式

                3.按特殊性进行排序
                4.若特殊性一样,按出现的顺序对声明排序,后面的权重大

            3.问题：
                1.可以使用!important提升为最高级样式
                    p {color:red !important;fon-size:14px;}
                2.内嵌大于外部的前提：嵌入式css样式的位置一定在外部式的后面
                    1.它们都是非行内样式,只不过外部样式是通过引用来的。

            4.优先级处理：
                1.优先级不同：
                    1.继承&lt;通用选择器(*)&lt; 元素标签选择器 &lt; 类选择器 &lt; 属性选择器 &lt; 伪类 &lt; ID 选择器 &lt;内联样式 &lt;!important

                3.优先级相同：
                    1.代码在后面的权重大

4.属性值和单位
    //属性值：
        1.单词(关键字)
        2.数字值
        3.颜色值


    1.数字值：用于定义各种元素的长度(包括宽/高/粗细)
        1.绝对值(绝对单位：物理长度)
            1.in：英寸（1英寸相当于72点，6派卡）
            2.pt：点
            3.cm：厘米
            4.mm：毫米
            5.pc：派卡（1派卡相当于12点）

        2.相对值(相对单位)
            1.px
                1.Css像素为度量

            2.百分数
                1.根据属性定义不同,相对对象不同。
                2.百分数可以累积
                3.继承是字体计算后值的大小而不是百分数数值。
                4.百分数赋值可以创建流动式布局。

            2.比例因子倍数
                //相对于当前字体
                1.em：相对于字体中字符的宽度，一般用来定义字体的大小。
                    1.em-height
                    2.继承父级元素的字体大小，在此基础上做em的相对值。
                2.ex：相对于字体中字母小写x的高度，只指示字符中间部位的高度。
                    1.ex-height
                    2.ex代表的高度不包括p和d这样的字母上下多出的部分，只包括中间的主体部分。

        3.关键字
            1.inherit:继承
                1.所有属性共有，使一个属性的值与其父元素相同。


        3.全局值的设置
                1.根据字体继承对应关系，利用相对值概念,关联全局字体大小
                2.body元素中定义一个字体的大小，相当于为页面设置一个默认字体大小
    2. 颜色
        原理：web颜色是按构成颜色的红蓝绿三个分量所占数量来指定的，每个颜色会分别指定一个从0到100%的数值，
            然后将他们混合得到最终的颜色。

        1.按名(关键字)指定颜色
            1.在css中有16种基本颜色和150中扩展颜色用来指定
        2.用RGB值来指定颜色
            1.用百分比指定
                background-color：rgb（90%，40%，60%）；
            2.用数值指定
                1.0-255之间的一个数值
                2.background-color：rgb（204,102,0）；
            3.使用十六进制来指定颜色
                3.每两个字符代表红绿蓝的各占的数值。
                4.background-color：#cc6600;</pre>