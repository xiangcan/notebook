<pre style="text-indent:0;">
1.浮动
   1.浮动原理：元素脱离文档流，向左或向右移动。
      1.浮动不是完全脱离文档流的，而是基于文档流，定位基于正常文档流取得一个位置，然后再向左或向右移动。
      2.浮动元素后面的元素会忽略浮动元素的布局空间，并填补其原先的空间，但是内容区域会受到浮动元素的影响，而内联元素则直接环绕浮动元素。
      3.属性：float，CSS允许浮动任何元素使用float属性，不论块级还是内联浮动元素，它们的浮动影响一样。

   2.浮动规则：
      1.水平方向：
            1.贴边性质：浮动的框尽量向左或向右移动，直到它的外边缘碰到包含框的内边距或另一个浮动框的边框为止。
                如果存在一个行框，浮动框的顶边会和当前行框的顶部对齐。
            2.如果水平方向没有足够的空间放置浮动元素，它将向下移动，直到有足够的空间或没有更多的浮动元素为止。
                垂直上：由上一个浮动元素或者块级元素的给定margin摆放。
            3.容器性质：浮动元素始终是在包含块内，在包含块的内容区，不会穿过padding区。

      2.垂直方向：
            1.从当前位置开始尽可能的向上移动，直到遇到前一个块级元素或浮动元素的下margin边界。
            2.文本环绕性质：.由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。
            3.浮动框的顶边不可以高于前面任何元素框的顶部。
                浮动元素会按照前一个块元素或者浮动元素的margin摆放。如果是内联元素，则会忽略它。
            4. 浮动框要放置得尽可能的高，注意在前面关于其顶边规则的限制下，满足此条。
            5. 左浮动框必须尽量靠左放置，右浮动框必须尽量靠右放置。在更高的位置和更靠左或靠右的位置间，选择前者。
            6.有'clear'属性的浮动框：其上外边距边界必须低于前面所有左浮动框（clear为"left"），或右浮动框（"clear:right"），或左右浮动框("clear:both")的下外边距界。

    3.浮动的作用
        1.文字环绕图片，最初的目的。
        2.块级元素缩减，不独占一行，并排显示，用于布局
        3.元素不分块、内联元素，都可以设置宽高。块级元素宽度不再延伸，如果不设置宽高，就自动缩减为内容的宽度

    4.浮动表现
        1.后续的非浮动元素：
            1.块元素：背景区域忽略浮动元素的存在，文本围绕浮动元素
                1.浮动元素会影响后面块级元素的内容区，但文本环绕无法改变块级元素的已设置的宽度

            2.内联元素：文本和背景都围绕浮动元素，紧跟在浮动元素的后面。

        2.前面的非浮动元素
            1.块元素：贴着前面的块元素的margin边界，margin值不会合并

            2.内联元素(特殊情况)：
                 总结：内联元素会被挤在在浮动元素后面

        4.后面是浮动元素：
            1.宽度足够：并排显示
            2.宽度不够：拥有类型内联元素的特性，自动换行。

        3.前面是浮动元素：同方向浮动，贴着边，不够就下沉

    5.总结
        1.浮动元素之后的元素，块级元素的内容区会被它占用，但块级元素的width没有改变，而内联元素会直接围绕它。
        2.浮动元素之前的元素将不会受到影响，浮动元素上margin边会贴合前面的元素的下margin。但内联元素有特殊情况。

        3.浮动元素的周围外边距不会合并
        4.浮动元素的外边界是包含块的内边距界。
        8.浮动元素不会相互重叠，会靠某一边依次排列。如果放不下，便会下沉。
        9.无论是内联元素还是元素的浮动，它们的规则一样。

        10.浮动元素不占用任何的正常文档流空间，但是会占用第二层的内容显示空间，所以后面的非浮动元素文本域会环流浮动元素。
        11.浮动元素的定位还是基于正常的文档流，然后从文档流中抽出尽可能远的移动至左侧或右侧，文字内容会环绕在浮动元素周围。当一个元素从正常文档流中抽出，后面的元素会自动补齐。

2.clear属性分析
        1.清除浮动：清除行框水平方向的浮动框，避免占用行框空间，造成文本环绕
        2.实质：基于该元素的元素框，在选择清浮动的一侧，添加margin-top，给浮动元素留出空间,
            元素顶边缘垂直下降到浮动框的下面

        3.clear：元素框的哪一侧不允许出现浮动元素，为浮动元素留出空间
            object.style.clear="left",clear是CSS属性，写在Style里面
            1.值：left/right   2.both       3.none
            2.效果：
                1.元素的元素的上外边框边界刚好在某一侧上浮动元素的下外边距边界之下。
                2.只能影响使用清除的元素本身，不能影响其他元素。希望移动哪个元素，就给哪个元素添加clear属性，它的使用不会影响其他元素的布局。

        4.内联元素的清浮动
            1.总结：内联元素和img貌似使用清浮动无效

            2.解决办法：添加&lt;br style="clear: both;" />

3.清浮动
    1.现象：父级没有设置高度的情况下，高度默认由内容自适应。然而子元素全部浮动，全部脱离了文档流，也没有其他元素可以来清浮动，父级无法获取高度就无法完全包围子级，造成高度塌陷。
        .news {
          background-color: gray;
          border: solid 1px black;
          }

        .news img {
          float: left;
          }

        .news p {
          float: right;
          }

        &lt;div class="news">
        &lt;img src="news-pic.jpg" />
        &lt;p>some text&lt;/p>
        &lt;/div>

    2.解决方法
        1.父级设定height属性
            1.问题：
                    1.浮动元素高度如果增加，父元素不一定能够包住子元素
                    2.父级高度无法自适应内容

        2.浮动元素下添加空div,利用clear属性清除
            &lt;div clear="all">&lt;/div>
            原因：父级发现一个非浮动元素，就会包围它，哪怕是空元素。

            .news {
              background-color: gray;
              border: solid 1px black;
              }

            .news img {
              float: left;
              }

            .news p {
              float: right;
              }

            .clear {
              clear: both;font-size:0;
              }

            &lt;div class="news">
            &lt;img src="news-pic.jpg" />
            &lt;p>some text&lt;/p>
            &lt;div class="clear">&lt;/div>
            &lt;/div>

              问题： IE6下的最小高度问题：IE6下高度小于19px的元素，高度被当做19px处理。
              解决方法：font-size:0；可以处理到2px。

        3.添加&lt;br class="all"/>

        4.给父级添加after伪类,创建一个空内容
            1.添加伪类
                1.方法一：
                    .clear:after{
                        content:"";
                        display:block;
                        clear:both;
                    }
                    .clear {zoom=1;}

                2.方法二：
                    .clear:after{
                        content:"";
                        display:table;
                        clear:both;
                    }
                    .clear {zoom=1}

            2.分析
                1.IE6,7只支持a:hover伪类
                2.zoom可以触发IE的haslayout，使得元素根据自身内容计算宽高，达到完全包围子元素的作用
                3.FF不支持
            3.总结
                1.zoom用于触发haslayout,解决IE浏览器的问题
                2.after伪类用于解决IE以外的浏览器

        6.BFC法
            1.父级设为浮动，激活父级BFC
                1.float也可以可以触发IE中的haslayout
            2.父级添加overflow：hidden/auto
                1.可能会隐藏内容，或触发了不需要的滚动条
                2.overflow:visible对清浮动无效，使用其他值
        7.父级使用inline-block。(少用)

    3.清浮动总结：
            1.IE下是元素触发haslayout即可
               宽度值(IE6以下)，高度值，绝对定位，zoom，浮动本身都可以让元素haslayout。显然，首选zoom:1;不会干扰任何样式。
            2.非IE浏览器常用的是overflow属性
               overflow:hidden;或是overflow:scroll都可以，不过由于后者经常一不小心出现滚动条，所以前者用的更多些。
            3.现代浏览器都支持after伪类伪元素
               用after写入一个clear属性的元素清除浮动。</pre>