<pre style="text-indent:0;">pipe思想：一个数据流stream
    1.gulp.src()产生数据流，gulp.dest()方法将数据流写入文件
    2.pipe()：流可以继续导入到其他插件中，也可以把流写入到文件中

gulp：代码自动化构建工具，可以自动执行开发中的常见任务，压缩合并
    1.基于Nodejs的自动任务运行器
    2.能自动化地完成文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。
    3.借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。

1.使用流程
    1.npm的全局和本地都安装gulp，通过命令行来执行gulp任务
    2.项目里安装所需的gulp插件
    3.新建gulp的配置文件gulpfile.js并写好配置信息（定义gulp任务），命令行根据gulpfile这个文件执行
    4.最后通过命令提示符运行gulp任务即可

2.实现流程分析
    1.npm install gulp -g：安装gulp
    2.npm init：配置package.json文件：
    3.npm install <name> --save-dev
        1.本地安装gulp插件，并保存到.json，
        2.建议本地也安装gulp(防止全局gulp升级后与此项目gulpfile.js代码不兼容)
    4.新建gulpfile.js文件，gulp项目的配置文件，是位于项目根目录的普通js文件(建议放在根目录，其他也可以)

        1.导入工具包
            var gulp = require('gulp'),                                     //本地安装gulp所用到的地方
                less = require('gulp-less');

        2.定义一个testLess任务（自定义任务名称）
            gulp.task('testLess', function () {
                gulp.src('src/less/index.less')                             //该任务针对的文件
                    .pipe(less())                                           //该任务调用的模块
                    .pipe(gulp.dest('src/css'));                            //将会在src/css下生成index.css
            });

        3.定义默认执行任务
            gulp.task('default',['testLess', 'elseTask']);                  //定义默认任务elseTask为其他任务

            //gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数
            //gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组)
            //gulp.dest(path[, options]) 处理完后文件生成路径

    5.运行gulp
        1.指定任务：gulp 任务名称
        2.默认任务：gulp+回车

常用插件
    npm install gulp-uglify --save-dev
    npm install gulp-minify-css --save-dev
    npm install gulp-ruby-sass --save-dev
    npm install gulp-htmlmin --save-dev


3.gulp API
    1.gulp.task(name [, deps, fn])：定义任务
        1.deps：可选，Arry，依赖任务列表，会在当前文件之前执行

            1.多个任务异步执行
                gulp.task('build', ['css', 'js', 'imgs']);
            2.当前任务依赖形式
                gulp.task('build', ['css', 'js', 'imgs'],function() {});

            3.默认任务，命令行输入gulp可以直接调用
                gulp.task('default', ['styles', 'jshint', 'watch']);
        2.fn：当前的任务函数

    2.gulp.src(path[,options])：获取文件，产生数据流
        1.path：为globs，字符串或数组
            gulp.src(['js/**/*.js', '!js/**/*.min.js'])         //使用数组来匹配多个文件

        2.例子：
            js/app.js：指定确切的文件名。
            js/*.js：某个目录所有后缀名为js的文件。
            js/**/*.js：某个目录及其所有子目录中的所有后缀名为js的文件。
            !js/app.js：除了js/app.js以外的所有文件。
            *.+(js  css)：当前目录下，所有后缀名为js或css的文件

    3.gulp.dest(path[,options])：写入文件，同属输出流，可以继续使用
        gulp.src('./client/templates/*.jade')
          .pipe(jade())
          .pipe(gulp.dest('./build/templates'))
          .pipe(minify())
          .pipe(gulp.dest('./build/minified_templates'));

    4.gulp.pipe()：管道，每个任务的连接，执行完一个任务之后，再次连接执行下一个任务，类式加操作加入执行队列
        gulp.task('uglifyjs', function () {
            gulp.src('src/js/**/*.js')
                .pipe(uglify())
                .pipe(gulp.dest('dist/js'));
        });
        gulp.task('default', function () {
            gulp.watch('src/js/**/*.js', ['uglifyjs']);
        });

    5.gulp.watch(path[,options],tasks)：监听文件，执行指定任务
        1.任务的执行需要在命令行输入，gulp.watch()需要定义在一个任务里
            gulp.task('watch', function () {
               gulp.watch('templates/*.tmpl.html', ['build']);
            });

        2.事件：
            1.change事件：当监控的文件修改时触发
                var watcher = gulp.watch('templates/*.tmpl.html', ['build']);
                watcher.on('change', function (event) {
                   console.log('Event path: ' + event.path);
                });
            2.其他事件
                end：回调函数运行完毕时触发。
                error：发生错误时触发。
                ready：当开始监听文件时触发。
                nomatch：没有匹配的监听文件时触发。
            3.watcher方法
                watcher.end()：停止watcher对象，不会再调用任务或回调函数。
                watcher.files()：返回watcher对象监视的文件。
                watcher.add(glob)：增加所要监视的文件，它还可以附件第二个参数，表示回调函数。
                watcher.remove(filepath)：从watcher对象中移走一个监视的文件。

4.模块加载方式
    1.单独加载
        var gulp = require('gulp'),
            jshint = require('gulp-jshint'),
            uglify = require('gulp-uglify'),
            concat = require('gulp-concat');

    2.批量加载：利用pagckage.json定义批量加载
        1.package.json
            {
               "devDependencies": {
                  "gulp-concat": "~2.2.0",
                  "gulp-uglify": "~0.2.1",
                  "gulp-jshint": "~1.5.1",
                  "gulp": "~3.5.6"
               }
            }
        2.gulpfile.js
            var gulp = require('gulp'),
                gulpLoadPlugins = require('gulp-load-plugins'),
                plugins = gulpLoadPlugins();

            gulp.task('js', function () {
               return gulp.src('js/*.js')
                  .pipe(plugins.jshint())
                  .pipe(plugins.jshint.reporter('default'))
                  .pipe(plugins.uglify())
                  .pipe(plugins.concat('app.js'))
                  .pipe(gulp.dest('build'));
            });

1.为什么要保存至package.json：
    1.因为node插件包相对来说非常庞大，所以不加入版本管理
    2.将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可
    3.npm install，则会根据当期目录package.json下载所有需要的包，npm install --production只下载dependencies节点的包</pre>
